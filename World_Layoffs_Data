###Step-by-Step Breakdown
###1. Load Data
###First, we load the data from the world_layoffs.layoffs table.
SELECT * 
FROM world_layoffs.layoffs;

##2. Create a Staging Table
##To safely work with the data, create a staging table (layoffs_staging) as a copy of the original table.
CREATE TABLE world_layoffs.layoffs_staging 
LIKE world_layoffs.layoffs;

INSERT INTO world_layoffs.layoffs_staging 
SELECT * FROM world_layoffs.layoffs;

###3. Remove Duplicates
###Check for Duplicates:
###Identify duplicates using the ROW_NUMBER() window function, partitioned by key columns.
SELECT company, industry, total_laid_off, `date`,
       ROW_NUMBER() OVER (PARTITION BY company, industry, total_laid_off, `date`) AS row_num
FROM world_layoffs.layoffs_staging;


###Find Real Duplicates:
###Expand the partition by more columns to identify real duplicates.
SELECT *
FROM (
    SELECT company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions,
           ROW_NUMBER() OVER (PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
    FROM world_layoffs.layoffs_staging
) duplicates
WHERE row_num > 1;


###Delete Duplicates:
###Using a common table expression (CTE) to delete duplicates.
WITH DELETE_CTE AS (
    SELECT company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions, 
           ROW_NUMBER() OVER (PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
    FROM world_layoffs.layoffs_staging
)
DELETE FROM world_layoffs.layoffs_staging
WHERE (company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions, row_num) IN (
    SELECT company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions, row_num
    FROM DELETE_CTE
) AND row_num > 1;

###4. Standardize Data
###Handle Null Values in Industry:
###Set blanks to NULL and populate NULLs using non-null values from the same company.
UPDATE world_layoffs.layoffs_staging2
SET industry = NULL
WHERE industry = '';

UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2
ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL
AND t2.industry IS NOT NULL;


###Standardize Industry Names:
UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry IN ('Crypto Currency', 'CryptoCurrency');


##Fix Country Names:
Remove trailing periods from country names.
UPDATE layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country);


###Convert Date Column:
###Convert the date column from text to a date type.
UPDATE layoffs_staging2
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

##5. Handle Null Values
Decide which null values are acceptable and which rows need to be removed.
DELETE FROM world_layoffs.layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

##6. Remove Unnecessary Columns
###Finally, drop the row_num column as it is no longer needed.
ALTER TABLE layoffs_staging2
DROP COLUMN row_num;


##Final Output
Now, the cleaned data is stored in world_layoffs.layoffs_staging2. You can view the final cleaned dataset.
SELECT * 
FROM world_layoffs.layoffs_staging2;

